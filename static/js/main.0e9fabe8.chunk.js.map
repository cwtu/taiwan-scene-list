{"version":3,"sources":["setups.js","Navbar.js","Scene.js","Scenelist.js","App.js","index.js"],"names":["cities","getUrl","city","skip","url","reducer","state","action","type","isError","isLoading","window","scrollTo","scenes","newScenes","concat","statusText","Error","Navbar","setRequest","id","onClick","document","getElementById","value","defaultValue","onChange","select","disabled","map","Scene","memo","Name","Description","DescriptionDetail","Picture","className","initialState","Scenelist","request","useReducer","dispatch","useEffect","skipCount","fetchScenes","a","removeEventListener","scrollHandler","fetch","response","json","status","length","addEventListener","Math","round","innerHeight","scrollY","body","offsetHeight","scene","ID","App","useState","ReactDOM","render"],"mappings":"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","file":"static/js/main.0e9fabe8.chunk.js","sourcesContent":["export const loadSceneNum = 30; // max = 5185\n\nexport const cities = [\n  [\"臺北市\", \"Taipei\"],\n  [\"新北市\", \"NewTaipei\"],\n  [\"桃園市\", \"Taoyuan\"],\n  [\"臺中市\", \"Taichung\"],\n  [\"臺南市\", \"Tainan\"],\n  [\"高雄市\", \"Kaohsiung\"],\n  [\"基隆市\", \"Keelung\"],\n  [\"新竹市\", \"Hsinchu\"],\n  [\"新竹縣\", \"HsinchuCounty\"],\n  [\"苗栗縣\", \"MiaoliCounty\"],\n  [\"彰化縣\", \"ChanghuaCounty\"],\n  [\"南投縣\", \"NantouCounty\"],\n  [\"雲林縣\", \"YunlinCounty\"],\n  [\"嘉義縣\", \"ChiayiCounty\"],\n  [\"嘉義市\", \"Chiayi\"],\n  [\"屏東縣\", \"PingtungCounty\"],\n  [\"宜蘭縣\", \"YilanCounty\"],\n  [\"花蓮縣\", \"HualienCounty\"],\n  [\"臺東縣\", \"TaitungCounty\"],\n  [\"金門縣\", \"KinmenCounty\"],\n  [\"澎湖縣\", \"PenghuCounty\"],\n  [\"連江縣\", \"LienchiangCounty\"],\n];\n\n// generate appropriate urls for the API\nexport function getUrl(city = null, skip = 0) {\n  var url = \"https://ptx.transportdata.tw/MOTC/v2/Tourism/ScenicSpot\";\n\n  url =\n    url +\n    (city ? \"/\" + city + \"?\" : \"?\") +\n    \"$top=\" +\n    loadSceneNum +\n    \"&$skip=\" +\n    skip +\n    \"&$format=JSON\";\n\n  return url;\n}\n\n// update state fields according to the actions\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"PREP_FETCH\": {\n      return { ...state, isError: false, isLoading: true };\n    }\n    // display new scene list at initial call\n    case \"INI_FETCH\": {\n      window.scrollTo(0, 0);\n      return {\n        ...state,\n        scenes: action.newScenes,\n        isLoading: false,\n      };\n    }\n    // concat scenes after the initial call\n    case \"CON_FETCH\": {\n      return {\n        ...state,\n        scenes: state.scenes.concat(action.newScenes),\n        isLoading: false,\n      };\n    }\n    case \"ERR_FETCH\": {\n      return { ...state, isLoading: false, isError: action.statusText };\n    }\n    default: {\n      throw new Error(\"Unhandled action type\");\n    }\n  }\n};\n","import { cities } from \"./setups.js\";\n\nconst Navbar = ({ setRequest }) => {\n  return (\n    <div id=\"navbar\">\n      <h1 id=\"title\">臺灣景點瀏覽</h1>\n      <section id=\"form\">\n        <button\n          onClick={() => {\n            setRequest(\"\");\n            document.getElementById(\"cities\").value = \"選擇城市\";\n          }}\n        >\n          全部\n        </button>\n        <select\n          id=\"cities\"\n          defaultValue=\"選擇城市\"\n          onChange={() => {\n            const select = document.getElementById(\"cities\");\n            setRequest(select.value);\n          }}\n        >\n          <option key=\"default\" disabled>\n            選擇城市\n          </option>\n          {cities.map((city) => (\n            <option\n              key={city[1]}\n              value={city[1]}\n              onClick={() => setRequest(city[1])}\n            >\n              {city[0]}\n            </option>\n          ))}\n        </select>\n      </section>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import { memo } from \"react\";\n\n// only render new scenes\nconst Scene = memo(({ Name, Description, DescriptionDetail, Picture }) => {\n  if (!Description) Description = DescriptionDetail;\n\n  return (\n    <li className=\"scene\">\n      <h2>{Name}</h2>\n      <hr />\n      <p className=\"description\">{Description}</p>\n    </li>\n  );\n});\n\nexport default Scene;\n","import Scene from \"./Scene.js\";\nimport { useEffect, useReducer } from \"react\";\nimport { loadSceneNum, getUrl, reducer } from \"./setups.js\";\n\nconst initialState = {\n  scenes: [],\n  isLoading: false,\n  isError: false,\n};\n\nconst Scenelist = ({ request }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    var skipCount = 0;\n    const fetchScenes = async (request) => {\n      window.removeEventListener(\"scroll\", scrollHandler); // prevent another fetch when loading\n      dispatch({ type: \"PREP_FETCH\" });\n\n      const response = await fetch(getUrl(request, skipCount));\n      const newScenes = await response.json();\n\n      if (response.status < 400) {\n        skipCount\n          ? dispatch({ type: \"CON_FETCH\", newScenes: newScenes })\n          : dispatch({ type: \"INI_FETCH\", newScenes: newScenes });\n\n        if (newScenes.length === loadSceneNum)\n          window.addEventListener(\"scroll\", scrollHandler); // add listener back only when there are more data to fetch\n\n        skipCount += loadSceneNum;\n      } else {\n        dispatch({ type: \"ERR_FETCH\", statusText: response.statusText });\n      }\n    };\n\n    // fetch more when scroll to bottom\n    const scrollHandler = () => {\n      if (\n        Math.round(window.innerHeight + window.scrollY) >=\n        document.body.offsetHeight\n      ) {\n        fetchScenes(request);\n      }\n    };\n\n    window.addEventListener(\"scroll\", scrollHandler);\n    fetchScenes(request); // first fetch\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler); // cleanup\n    };\n  }, [request]);\n\n  return (\n    <>\n      {state.isError ? (\n        <p id=\"error\">Error: {state.isError}</p>\n      ) : (\n        <ul className=\"scenelist\">\n          {state.scenes.map((scene) => (\n            <Scene key={scene.ID} {...scene} />\n          ))}\n          {state.isLoading && <div id=\"loading\">Loading...</div>}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Scenelist;\n","import { useState } from \"react\";\nimport Navbar from \"./Navbar.js\";\nimport Scenelist from \"./Scenelist.js\";\n\nconst App = () => {\n  const [request, setRequest] = useState(\"\");\n\n  return (\n    <>\n      <Navbar setRequest={setRequest} />\n      <Scenelist request={request} />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}